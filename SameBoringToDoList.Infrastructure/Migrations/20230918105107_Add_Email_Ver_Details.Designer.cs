// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SameBoringToDoList.Infrastructure.Persistence;

#nullable disable

namespace SameBoringToDoList.Infrastructure.Migrations
{
    [DbContext(typeof(SameBoringToDoListDbContext))]
    [Migration("20230918105107_Add_Email_Ver_Details")]
    partial class Add_Email_Ver_Details
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SameBoringToDoList.Domain.Entities.ToDoList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ToDoLists", (string)null);
                });

            modelBuilder.Entity("SameBoringToDoList.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SameBoringToDoList.Domain.Entities.ToDoList", b =>
                {
                    b.OwnsMany("SameBoringToDoList.Domain.Entities.ToDoItem", "ToDoItems", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ToDoListId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsDone")
                                .HasColumnType("bit");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id", "ToDoListId");

                            b1.HasIndex("ToDoListId");

                            b1.ToTable("ToDoItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ToDoListId");
                        });

                    b.Navigation("ToDoItems");
                });

            modelBuilder.Entity("SameBoringToDoList.Domain.Entities.User", b =>
                {
                    b.OwnsOne("SameBoringToDoList.Domain.ValueObjects.Credential", "Credential", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("PasswordHash")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<Guid>("PasswordResetToken")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("PasswordSalt")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<DateTime?>("ResetTokenExpires")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("VerificationToken")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("VerifiedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id", "UserId");

                            b1.HasIndex("UserId")
                                .IsUnique();

                            b1.ToTable("credentials", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Credential")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
